'use strict';

const _ = require('lodash');

function extractConfig({ catalog, serviceConfig, serviceId, planId, configType, combine }) {
  let service = getService(catalog, serviceId);
  let config = serviceConfig[service.name];
  if (!config || !config[configType]) {
    return {};
  }
  let extensionConfig = config[configType];
  let sharedConfig = extensionConfig.shared;
  let planName = getServicePlan(service, planId).name;
  let planConfig = extensionConfig.per_plan && extensionConfig.per_plan[planName];
  return _.cloneDeep(combine({}, sharedConfig, planConfig));
}

function extractBindingConfig(catalog, serviceConfig, serviceId, planId) {
  return extractConfig({ catalog, serviceConfig, serviceId, planId,
    configType: 'extend_credentials', combine: _.merge });
}

function extractXsSecurity(catalog, serviceConfig, serviceId, planId) {
  return extractConfig({ catalog, serviceConfig, serviceId, planId,
    configType: 'extend_xssecurity', combine: _.extend });
}

function getService(catalog, serviceId) {
  return catalog.services.find((service) => service.id === serviceId);
}

function getServicePlan(service, planId) {
  return service.plans.find((plan) => plan.id === planId);
}

function stripSuffix(text, suffix) {
  return text.endsWith(suffix) ? text.slice(0, -suffix.length) : text;
}

function addSuffix(text, suffix) {
  return text + suffix;
}

module.exports = {
  extractBindingConfig,
  extractXsSecurity,
  getService,
  getServicePlan,
  stripSuffix,
  addSuffix
};
