'use strict';

const _ = require('lodash');
const request = require('request').defaults({ timeout: parseInt(process.env.SBF_UAA_TIMEOUT) || 20000 });
const loggify = require('../utils/logger-util').loggify;
const { extractXsSecurity } = require('../utils/config-util');
const getXsSecurityFromContext = require('./extract-xssecurity');
const BadRequest = require('http-errors').BadRequest;

class UaaProvider {
  constructor(credentials) {
    this._credentials = credentials;
  }

  provision(req, cb) {
    this._createInstance(req, cb);
  }

  deprovision(req, cb) {
    this._deleteInstance(req, cb);
  }

  bind(req, cb) {
    this._getCredentials(req, cb);
  }

  unbind(req, cb) { cb(); }

  callXsuaa(req, options, cb) {
    const tracer = req.loggingContext.getTracer(__filename);
    this._callXsuaa(tracer, options, cb);
  }

  _callXsuaa(tracer, options, cb) {
    this._obtainAccessToken(tracer, (err, accessToken) => {
      if (err) { return cb(err); }

      const uaaOptions = _.extend({}, options, {
        uri: options.uri || options.path,
        baseUrl: this._credentials.url,
        auth: { bearer: accessToken }
      });
      tracer.debug(`Making request to UAA with options ${loggify(uaaOptions)}`);
      request(uaaOptions, cb);
    });
  }

  _getCredentials(req, cb) {
    const tracer = req.loggingContext.getTracer(__filename);
    const encodedInstanceId = encodeURIComponent(req.brokerContext.instance_id);
    let options = {
      uri: `/sap/rest/broker/clones/${encodedInstanceId}/binding`,
      method: 'GET'
    };
    this._callXsuaa(tracer, options, (error, res, body) => {
      if (error) { return cb(error); }

      if (res.statusCode !== 200) {
        return cb(new BadRequest(`Failed to obtain UAA cloning binding information. Status code: ${res.statusCode}. Body: ${loggify(body)}`));
      }

      try {
        const credentials = JSON.parse(body);
        tracer.debug(`UAA responded with status code ${res.statusCode} and body ${loggify(credentials)}`);
        cb(null, { uaa: credentials });
      } catch (err) {
        cb(new Error(`Failed to parse UAA response with status code ${res.statusCode} and body ${loggify(body)}`));
      }
    });
  }

  _createInstance(req, cb) {
    const tracer = req.loggingContext.getTracer(__filename);
    const serviceId = req.brokerContext.service_id;
    const planId = req.brokerContext.plan_id;
    const brokerConfig = req.app._sbfConfig;
    let xsSecurity = getXsSecurityFromContext(req.brokerContext);
    let securityConfig = extractXsSecurity(brokerConfig.catalog, brokerConfig.serviceConfig, serviceId, planId);
    xsSecurity = _.extend({}, xsSecurity, securityConfig);

    const options = {
      uri: '/sap/rest/broker/clones',
      qs: this._buildQs(req.brokerContext),
      body: xsSecurity,
      method: 'POST',
      json: true
    };
    this._callXsuaa(tracer, options, (error, res, body) => {
      if (error) { return cb(error); }

      const escapedBody = loggify(body);
      const message = `UAA responded with status code ${res.statusCode} and body ${escapedBody}`;
      tracer.debug(message);

      if (res.statusCode === 201) {
        return cb();
      } else if (res.statusCode === 400) {
        return cb(new BadRequest(escapedBody));
      } else {
        return cb(new Error(message));
      }
    });
  }

  _deleteInstance(req, cb) {
    const tracer = req.loggingContext.getTracer(__filename);
    const encodedInstanceId = encodeURIComponent(req.brokerContext.instance_id);
    const options = {
      uri: `/sap/rest/broker/clones/${encodedInstanceId}`,
      method: 'DELETE'
    };
    this._callXsuaa(tracer, options, (error, res, body) => {
      if (error) { return cb(error); }

      const escapedBody = loggify(body);
      const message = `UAA responded with status code ${res.statusCode} and body ${escapedBody}`;
      tracer.debug(message);

      if (res.statusCode === 404 ||
        res.statusCode === 200) {
        return cb(null);
      } else if (res.statusCode === 400) {
        return cb(new BadRequest(escapedBody));
      } else {
        return cb(new Error(message));
      }
    });
  }

  _buildQs(brokerContext) {
    const qs = { serviceinstanceid: brokerContext.instance_id };
    const context = brokerContext.context;
    const subaccountId = context && context.subaccount_id;

    if (subaccountId) {
      qs.subaccountid = subaccountId;
    } else {
      qs.orgid = (context && context.organization_guid) || brokerContext.organization_guid;
    }

    return qs;
  }

  _obtainAccessToken(tracer, cb) {
    const options = {
      url: `${this._credentials.url}/oauth/token?grant_type=client_credentials`,
      auth: { username: this._credentials.clientid, password: this._credentials.clientsecret }
    };

    tracer.debug(`Making request to UAA for JWT token at ${options.url}`);
    request(options, (err, res, body) => {
      if (err) { return cb(err); }
      try {
        cb(null, JSON.parse(body).access_token);
      } catch (err) {
        cb(new Error(`Failed to parse UAA response body: ${loggify(body)}`));
      }
    });
  }
}

module.exports = UaaProvider;
