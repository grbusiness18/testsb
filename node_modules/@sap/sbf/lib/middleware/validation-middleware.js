'use strict';

const ajv = require('ajv');
const BadRequest = require('http-errors').BadRequest;
const configUtil = require('../utils/config-util');

const bindingSchema = require('../validation/schemas/rest-api/binding-schema');
const deprovisioningSchema = require('../validation/schemas/rest-api/deprovisioning-schema');
const updateSchema = require('../validation/schemas/rest-api/update-schema');
const lastOperationSchema = require('../validation/schemas/rest-api/last-operation-schema');
const provisioningSchema = require('../validation/schemas/rest-api/provisioning-schema');
const unbindingSchema = require('../validation/schemas/rest-api/unbinding-schema');

module.exports = {
  provision: validateProvision,
  deprovision: (req, res, next) => next(validate(deprovisioningSchema, req)),
  update: (req, res, next) => next(validate(updateSchema, req)),
  lastOperation: (req, res, next) => next(validate(lastOperationSchema, req)),
  bind: (req, res, next) => next(validate(bindingSchema, req)),
  unbind: (req, res, next) => next(validate(unbindingSchema, req))
};

function validateProvision(req, res, next) {
  for (const property of ['organization_guid', 'space_guid']) {
    if ((!req.brokerContext.context || !req.brokerContext.context[property]) && !req.brokerContext[property]) {
      return next(new BadRequest(`Either data.context.${property} or data.${property} should be provided`));
    }
  }

  next(validate(provisioningSchema, req));
}

function validate(schema, req) {
  const jsonValidator = new ajv();
  if (!jsonValidator.validate(schema, req.brokerContext)) {
    return new BadRequest(jsonValidator.errorsText());
  }

  const serviceId = req.brokerContext.service_id;
  if (serviceId) {
    const catalog = req.app._sbfConfig.catalog;
    const service = configUtil.getService(catalog, serviceId);
    if (!service) {
      return new BadRequest(`service_id ${serviceId} not found in the service catalog`);
    }

    const planId = req.brokerContext.plan_id;
    if (planId && !configUtil.getServicePlan(service, planId)) {
      return new BadRequest(`plan_id ${planId} not found in the service catalog`);
    }
  }
}
