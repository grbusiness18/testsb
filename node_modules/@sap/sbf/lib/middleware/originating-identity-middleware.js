'use strict';

const format = require('util').format;
const { BadRequest } = require('http-errors');

const HEADER_NAME = 'x-broker-api-originating-identity';

module.exports = function originatingIdentity(req, res, next) {
  const value = req.headers[HEADER_NAME];
  if (!value) {
    let tracer = req.loggingContext.getTracer(__filename);
    tracer.debug(`Header "${HEADER_NAME}" not provided in ${req.method} request to ${req.url}`);
    return next();
  }

  // Header format: <platform> <value>
  // Reference: https://github.com/openservicebrokerapi/servicebroker/blob/v2.13/spec.md#originating-identity
  const splitted = /(\S+)\s+(\S+)/.exec(value);
  if (!splitted || splitted.length !== 3) {
    return next(new BadRequest(headerNotValid(value, 'Incorrect format')));
  }

  const decoded = Buffer.from(splitted[2], 'base64');
  try {
    req.originatingIdentity = JSON.parse(decoded);
    next();
  } catch (err) {
    return next(new BadRequest(headerNotValid(value, 'Could not parse the decoded value into JSON: ' + err.message)));
  }
};

function headerNotValid(value, reason) {
  return format('Header "%s":"%s" not valid: %s', HEADER_NAME, value, reason);
}
