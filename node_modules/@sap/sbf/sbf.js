#!/usr/bin/env node
'use strict';

const _ = require('lodash');
const assert = require('assert');
const express = require('express');
const auditLogger = require('./lib/audit-logger');
const bootstrap = require('./lib/bootstrap');

const bodyParser = require('body-parser');
const loggerUtils = require('./lib/utils/logger-util');
const checkApiVersion = require('./lib/middleware/api-version-middleware');
const processOriginatingIdentity = require('./lib/middleware/originating-identity-middleware');
const requestTraceMiddleware = require('./lib/middleware/request-trace-middleware');
const authorizationMiddleware = require('./lib/middleware/authorization-middleware');

const apiHandlers = require('./lib/api-handlers');
const addBrokerContext = require('./lib/middleware/broker-context-middleware');
const validate = require('./lib/middleware/validation-middleware');
const errorHandler = require('./lib/middleware/error-handler');
const version = require('./package.json').version;
const loggingUtil = require('./lib/utils/logger-util');
const logger = loggingUtil.getLogger('/ServiceBroker/Server');
const UaaProvider = require('./lib/credential-providers/UaaProvider');
const SbssProvider = require('./lib/credential-providers/SbssProvider');

class ServiceBroker {
  constructor(options) {
    const sbfConfig = bootstrap.loadConfig(options);
    this.app = express();

    if (sbfConfig.enableAuditLog) {
      this.app.audit = auditLogger.initialize(sbfConfig.auditCredentials, () => { });
    }

    this._initializeHandlers(sbfConfig);
  }

  callXsuaa(req, options, cb) {
    const credentialsProvider = req.app._sbfConfig.credentialsProvider;
    if (!(credentialsProvider instanceof UaaProvider)) {
      return cb(new Error('Only available when using XSUAA service instance'));
    }
    credentialsProvider.callXsuaa(req, options, cb);
  }

  static createCredentialsProvider(credentials) {
    assert(_.isPlainObject(credentials), 'Provided service credentials should be an object');
    if (credentials.hasOwnProperty('clientid')) {
      return new UaaProvider(credentials);
    }
    if (/^jdbc:sap:/.test(credentials.url)) {
      return new SbssProvider(credentials);
    }
    if (/^postgres:/.test(credentials.uri)) {
      assert(_.isPlainObject(credentials.restrictedUser), 'Using PostgreSQL SBSS requires restricted user credentials to be provided');
      return new SbssProvider(credentials);
    }
    throw new Error('Could not create credentials provider with the given service credentials');
  }

  _initializeHandlers(sbfConfig) {
    this.app._sbfConfig = sbfConfig;
    this.app.use(loggerUtils.getMiddleware());
    this.app.use(authorizationMiddleware);
    this.app.use(checkApiVersion);
    this.app.use(processOriginatingIdentity);
    this.app.use(bodyParser.json());
    this.app.use(requestTraceMiddleware);

    const routesRouter = express.Router({ mergeParams: true });
    routesRouter.use(makeSuffix);

    routesRouter.get('/catalog', apiHandlers.handleCatalog);

    routesRouter.put('/service_instances/:instance_id',
      addBrokerContext, validate.provision, apiHandlers.handleProvision);

    routesRouter.delete('/service_instances/:instance_id',
      addBrokerContext, validate.deprovision, apiHandlers.handleDeprovision);

    routesRouter.patch('/service_instances/:instance_id',
      addBrokerContext, validate.update, apiHandlers.handleUpdate);

    routesRouter.get('/service_instances/:instance_id/last_operation',
      addBrokerContext, validate.lastOperation, apiHandlers.handleLastOperation);

    routesRouter.put('/service_instances/:instance_id/service_bindings/:binding_id',
      addBrokerContext, validate.bind, apiHandlers.handleBind);

    routesRouter.delete('/service_instances/:instance_id/service_bindings/:binding_id',
      addBrokerContext, validate.unbind, apiHandlers.handleUnbind);

    this.app.use('/v2', routesRouter);
    this.app.use('/:pathSuffix/v2', routesRouter);
    this.app.use(errorHandler);
  }

  start() {
    let server = this.app.listen(process.env.PORT >= 0 ? process.env.PORT : 8080, () => {
      const port = server.address().port;
      logger.info(`Service broker listening on port ${port}`);
    });
    return server;
  }
}

function makeSuffix(req, res, next) {
  const tracer = req.loggingContext.getTracer(__filename);
  req.catalogSuffix = req.params.pathSuffix || req.app._sbfConfig.catalogSuffix;
  tracer.debug('catalog suffix: %s', req.catalogSuffix);
  if (req.catalogSuffix) {
    req.catalogSuffix = `-${req.catalogSuffix}`;
  }
  next();
}

logger.info(`Service broker framework v${version}`);

if (require.main === module) {
  new ServiceBroker().start();
}

module.exports = ServiceBroker;
